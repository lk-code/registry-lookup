name: Build and Deploy

on:
 push:
  branches:
   - main
 workflow_dispatch:

permissions:
 contents: write
 packages: write

env:
 VERSION: "1.0.${{ github.run_number }}"
 DOTNET_VERSION: "9.0.x"
 DOCKER_IMAGE: "docker.io/lkcode/registry-lookup"
 DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
 FRONTEND_APPSETTINGS_FILE: "./source/RegistryLookup.Frontend/wwwroot/appsettings.json"
 BACKEND_APPSETTINGS_FILE: "./source/RegistryLookup.Backend/appsettings.json"
 OPENAPI_FILE: "./source/RegistryLookup.Backend/RegistryLookup.Backend.json"
 CLIENT_CSPROJ: "./source/RegistryLookup.Client/RegistryLookup.Client.csproj"
 CLIENT_OUTPUT_DIR: "./source/RegistryLookup.Client"
 CLIENT_NAMESPACE: "RegistryLookup.Client"

jobs:
 
 build-test:
  runs-on: ubuntu-latest
  
  steps:
   - name: Checkout repository
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
      dotnet-version: ${{ env.DOTNET_VERSION }}

   - name: Restore dependencies
     run: |
      dotnet restore

   - name: Build
     run: |
      dotnet build --configuration Release --no-restore

   - name: Install Kiota CLI
     run: |
      dotnet tool install --global Microsoft.OpenApi.Kiota

   - name: Generate Client
     shell: bash
     run: |
      kiota generate \
        --language csharp \
        --class-name RestClient \
        --namespace-name ${{ env.CLIENT_NAMESPACE }} \
        --openapi ${{ env.OPENAPI_FILE }} \
        --output ${{ env.CLIENT_OUTPUT_DIR }} \

   - name: Build Client
     run: |
      dotnet build --configuration Release --no-restore

   - name: Install Playwright
     shell: pwsh
     run: |
      ./source/RegistryLookup.Tests.System/bin/Release/net9.0/playwright.ps1 install

   - name: Test
     run: |
      dotnet test --configuration Release

   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3

   - name: Build Docker Image
     run: |
      docker build \
        --file ./Dockerfile \
        --build-arg FRONTEND_APPSETTINGS_FILE=${{ env.FRONTEND_APPSETTINGS_FILE }} \
        --build-arg BACKEND_APPSETTINGS_FILE=${{ env.BACKEND_APPSETTINGS_FILE }} \
        --tag test-image .
 
 post-build:
  runs-on: ubuntu-latest
  needs:
   - build-test
  
  steps:
   - name: Checkout repository
     uses: actions/checkout@v4

   - name: Configure Git User and Auth
     run: |
      git config user.name "GitHub Actions"
      git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

   - name: Set Version Git Tag
     run: |
      git tag ${{ env.VERSION }}

   - name: update Frontend appsettings.json
     run: |
      sed -i "s/\"Version\": \".*\"/\"Version\": \"$VERSION\"/" ${{ env.FRONTEND_APPSETTINGS_FILE }}
      git add ${{ env.FRONTEND_APPSETTINGS_FILE }}

   - name: cat Frontend appsettings.json
     run: |
      cat ${{ env.FRONTEND_APPSETTINGS_FILE }}

   - name: update Backend appsettings.json
     run: |
      sed -i "s/\"Version\": \".*\"/\"Version\": \"$VERSION\"/" ${{ env.BACKEND_APPSETTINGS_FILE }}
      git add ${{ env.BACKEND_APPSETTINGS_FILE }}

   - name: cat Backend appsettings.json
     run: |
      cat ${{ env.BACKEND_APPSETTINGS_FILE }}

   - name: Create and push deploy branch
     run: |
      git push origin ${{ env.VERSION }}
      git checkout -b deploy
      git commit -m "Release version ${{ env.VERSION }}"
      git push origin deploy --force

 client-deploy:
  runs-on: ubuntu-latest
  needs:
   - post-build
  
  steps:
   - name: Checkout repository
     uses: actions/checkout@v4
     with:
       ref: deploy

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
      dotnet-version: ${{ env.DOTNET_VERSION }}

   - name: Restore dependencies
     run: |
      dotnet restore
      
   - name: Build
     shell: pwsh
     run: |
      dotnet build ${{ env.CLIENT_CSPROJ }} --configuration Release --no-restore -p:PackageVersion=${{ env.VERSION }}

   - name: Install Kiota CLI
     run: |
      dotnet tool install --global Microsoft.OpenApi.Kiota

   - name: Generate Client
     shell: bash
     run: |
      kiota generate \
        --language csharp \
        --class-name RestClient \
        --namespace-name ${{ env.CLIENT_NAMESPACE }} \
        --openapi ${{ env.OPENAPI_FILE }} \
        --output ${{ env.CLIENT_OUTPUT_DIR }} \

   - name: Build Client
     run: |
      dotnet build --configuration Release --no-restore

   - name: Upload Build Artifact
     uses: actions/upload-artifact@v4.6.2
     with:
      name: ${{ env.VERSION }}
      path: "**/*.${{ env.VERSION }}.nupkg"

   - name: Publish
     run: dotnet nuget push "**/*.${{ env.VERSION }}.nupkg" --no-symbols --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source "nuget.org"

 docker-deploy:
  runs-on: ubuntu-latest
  needs:
   - post-build
  
  steps:
   - name: Checkout repository
     uses: actions/checkout@v4
     with:
       ref: deploy

   - name: Setup Docker Buildx
     uses: docker/setup-buildx-action@v3

   - name: Log in to Docker Hub
     uses: docker/login-action@v3.4.0
     with:
      username: ${{ secrets.DOCKERHUB_USERNAME }}
      password: ${{ secrets.DOCKERHUB_TOKEN }}

   - name: Extract metadata (tags, labels) for Docker
     id: meta
     uses: docker/metadata-action@v5.7.0
     with:
      images: ${{ env.DOCKER_IMAGE }}
      tags: |
       type=raw,value=${{ env.VERSION }}
       type=raw,value=latest

   - name: cat Frontend appsettings.json
     run: |
      cat ${{ env.FRONTEND_APPSETTINGS_FILE }}

   - name: cat Backend appsettings.json
     run: |
      cat ${{ env.BACKEND_APPSETTINGS_FILE }}

   - name: Build and push Docker image
     uses: docker/build-push-action@v6.18.0
     with:
      file: ./Dockerfile
      push: true
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      platforms: ${{ env.DOCKER_PLATFORMS }}
      build-args: |
        FRONTEND_APPSETTINGS_FILE=${{ env.FRONTEND_APPSETTINGS_FILE }}
        BACKEND_APPSETTINGS_FILE=${{ env.BACKEND_APPSETTINGS_FILE }}